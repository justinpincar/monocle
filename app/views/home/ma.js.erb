function sendEvent(paramsString) {
    queryString = "accountId=<%= @account._id %>";
    queryString += "&sessionId=" + _maq.sessionId;

    if (typeof _maq_identify !== 'undefined') {
        if (_maq_identify.id) {
            queryString += "&identifyId=" + _maq_identify.id;
        }
        if (_maq_identify.email) {
            queryString += "&identifyEmail=" + _maq_identify.email;
        }
        if (_maq_identify.name) {
            queryString += "&identifyName=" + _maq_identify.name;
        }
    }

    queryString += "&" + paramsString;

    var ma = document.createElement('script');
    ma.type = 'text/javascript';
    ma.async = true;
    ma.src = ('https:' == document.location.protocol ? 'https://sidesp.in/events/?' : 'http://events.sidesp.in/?') + queryString;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ma, s);
}

function generateEvent(eventArray) {
    var action = eventArray[0];

    if (action == "_trackPageview") {
        paramsString = "href=" + encodeURIComponent(document.location.href);

        var url_events = []
    <% @events.each do |event| %>
        url_events.push({id: '<%= event._id %>', pattern: '<%= event.pattern_js %>'});
    <% end %>

        var href = document.location.href;

        for (var i = 0; i < url_events.length; i++) {
            var regex = new RegExp(url_events[i].pattern);
            if (regex.test(href)) {
                paramsString += "&eventId=" + url_events[i].id;
                break;
            }
        }
    }
    else if (action == "_trackEvent") {
        paramsString = "href=" + encodeURIComponent(document.location.href);
        paramsString += "&eventId=" + eventArray[1];
    }
    else {
        return;
    }

    sendEvent(paramsString);
}

function getCookie(c_name) {
    var i,x,y,ARRcookies = document.cookie.split(";");
    for (i = 0; i < ARRcookies.length; i++) {
        x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
        y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
        x = x.replace(/^\s+|\s+$/g, "");
        if (x == c_name) {
            return decodeURIComponent(y);
        }
    }

    return null;
}

function setCookie(c_name, value, exdays) {
    var exdate = new Date();
    exdate.setDate(exdate.getDate() + exdays);
    var c_value = encodeURIComponent(value) + ((exdays == null) ? "" : "; expires=" + exdate.toUTCString()) + "; path=/";
    document.cookie = c_name + "=" + c_value;
}

function uuid() {
    return 'xxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function ma_load() {
    _maq = _maq || [];
    _maq.sessionId = getCookie("_maq_sessionId");
    if (!_maq.sessionId) {
        _maq.sessionId = uuid();
        setCookie("_maq_sessionId", _maq.sessionId, 365 * 5);
    }

    for (var i = 0; i < _maq.length; i++) {
        generateEvent(_maq[i]);
    }

    _maq.push = function() {
        for (var i = 0, l = arguments.length; i < l; i++) {
            this[this.length] = arguments[i];

            generateEvent(arguments[i]);
        }

        return this.length;
    };

    // TODO: Make cross-browser compatible and dynamic, and handle case where element doesn't exist (or multiple elements).
    // document.getElementById("right-bar").addEventListener('click', function() { _maq.push(['_trackEvent', 1]);}, false);
}

function ma_load_fallback() {
    setTimeout("if (!ma_loaded) { ma_load() }", 0);
}

function doScrollCheck() {
    if (ma_loaded) {
        return;
    }

    try {
        document.documentElement.doScroll("left");
    } catch(e) {
        setTimeout(doScrollCheck, 1);
        return;
    }

    ma_loaded = 1;
    ma_load();
}

var ma_loaded = 0;
if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", function() {
        ma_loaded = 1;
        ma_load();
    }, false);
}
else if (document.all && !window.opera) {
    doScrollCheck();
}

if (window.addEventListener) {
    window.addEventListener('load', ma_load_fallback, false);
}
else if (window.attachEvent) {
    window.attachEvent('onload', ma_load_fallback);
}

/*
 Developed by Robert Nyman, http://www.robertnyman.com
 Code/licensing: http://code.google.com/p/getelementsbyclassname/
 */
/*
var getElementsByClassName = function (className, tag, elm) {
    if (document.getElementsByClassName) {
        getElementsByClassName = function (className, tag, elm) {
            elm = elm || document;
            var elements = elm.getElementsByClassName(className),
                    nodeName = (tag) ? new RegExp("\\b" + tag + "\\b", "i") : null,
                    returnElements = [],
                    current;
            for (var i = 0, il = elements.length; i < il; i += 1) {
                current = elements[i];
                if (!nodeName || nodeName.test(current.nodeName)) {
                    returnElements.push(current);
                }
            }
            return returnElements;
        };
    }
    else if (document.evaluate) {
        getElementsByClassName = function (className, tag, elm) {
            tag = tag || "*";
            elm = elm || document;
            var classes = className.split(" "),
                    classesToCheck = "",
                    xhtmlNamespace = "http://www.w3.org/1999/xhtml",
                    namespaceResolver = (document.documentElement.namespaceURI === xhtmlNamespace) ? xhtmlNamespace : null,
                    returnElements = [],
                    elements,
                    node;
            for (var j = 0, jl = classes.length; j < jl; j += 1) {
                classesToCheck += "[contains(concat(' ', @class, ' '), ' " + classes[j] + " ')]";
            }
            try {
                elements = document.evaluate(".//" + tag + classesToCheck, elm, namespaceResolver, 0, null);
            }
            catch (e) {
                elements = document.evaluate(".//" + tag + classesToCheck, elm, null, 0, null);
            }
            while ((node = elements.iterateNext())) {
                returnElements.push(node);
            }
            return returnElements;
        };
    }
    else {
        getElementsByClassName = function (className, tag, elm) {
            tag = tag || "*";
            elm = elm || document;
            var classes = className.split(" "),
                    classesToCheck = [],
                    elements = (tag === "*" && elm.all) ? elm.all : elm.getElementsByTagName(tag),
                    current,
                    returnElements = [],
                    match;
            for (var k = 0, kl = classes.length; k < kl; k += 1) {
                classesToCheck.push(new RegExp("(^|\\s)" + classes[k] + "(\\s|$)"));
            }
            for (var l = 0, ll = elements.length; l < ll; l += 1) {
                current = elements[l];
                match = false;
                for (var m = 0, ml = classesToCheck.length; m < ml; m += 1) {
                    match = classesToCheck[m].test(current.className);
                    if (!match) {
                        break;
                    }
                }
                if (match) {
                    returnElements.push(current);
                }
            }
            return returnElements;
        };
    }
    return getElementsByClassName(className, tag, elm);
};
*/
